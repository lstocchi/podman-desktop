// packages/renderer/vite.config.js
import { join } from "path";
import * as path2 from "path";
import { svelte } from "file:///C:/Users/baldr/Work/github.com/containers/podman-desktop/node_modules/@sveltejs/vite-plugin-svelte/src/index.js";
import { defineConfig } from "file:///C:/Users/baldr/Work/github.com/containers/podman-desktop/node_modules/vite/dist/node/index.js";
import { fileURLToPath } from "url";

// vitest-shared-extensions.config.js
import path from "node:path";
function coverageConfig(packageRoot, packageName) {
  const obj = {
    coverage: {
      all: true,
      clean: true,
      src: [packageRoot],
      exclude: [
        "**/builtin/**",
        "**/cypress/**",
        "**/dist/**",
        "**/node_modules/**",
        "**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}",
        "**/*.{tsx,cjs,js,d.ts}",
        "**/*-info.ts",
        "**/.{cache,git,idea,output,temp,cdix}/**",
        "**/*{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tailwind,postcss}.config.*"
      ],
      provider: "v8",
      reportsDirectory: path.join(packageRoot, "../../", `test-resources/coverage/${packageName}`),
      reporter: ["lcov", "text"]
    }
  };
  return obj;
}

// packages/renderer/vite.config.js
var __vite_injected_original_import_meta_url = "file:///C:/Users/baldr/Work/github.com/containers/podman-desktop/packages/renderer/vite.config.js";
var filename = fileURLToPath(__vite_injected_original_import_meta_url);
var PACKAGE_ROOT = path2.dirname(filename);
var PACKAGE_NAME = "renderer";
var vite_config_default = defineConfig({
  mode: process.env.MODE,
  root: PACKAGE_ROOT,
  resolve: {
    alias: {
      "/@/": join(PACKAGE_ROOT, "src") + "/"
    }
  },
  plugins: [svelte({ hot: !process.env.VITEST })],
  optimizeDeps: {
    exclude: ["tinro"]
  },
  test: {
    include: ["src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}"],
    globals: true,
    environment: "jsdom",
    alias: [
      // https://github.com/vitest-dev/vitest/issues/2834
      { find: /^svelte$/, replacement: "svelte/internal" }
    ],
    deps: {
      inline: [
        "moment"
      ]
    },
    ...coverageConfig(PACKAGE_ROOT, PACKAGE_NAME)
  },
  base: "",
  server: {
    fs: {
      strict: true
    }
  },
  build: {
    sourcemap: true,
    outDir: "dist",
    assetsDir: ".",
    emptyOutDir: true,
    reportCompressedSize: false
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
